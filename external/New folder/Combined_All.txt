/// Views Start of ChampionDetailView.xaml.cs ///
﻿using System.Windows.Controls;

namespace SkinHunterWPF.Views
{
    public partial class ChampionDetailView : UserControl
    {
        public ChampionDetailView()
        {
            InitializeComponent();
        }
    }
}
/// Views End of ChampionDetailView.xaml.cs ///

/// Views Start of ChampionGridView.xaml.cs ///
﻿using System.Windows.Controls;

namespace SkinHunterWPF.Views
{
    public partial class ChampionGridView : UserControl
    {
        public ChampionGridView()
        {
            InitializeComponent();
        }
    }
}
/// Views End of ChampionGridView.xaml.cs ///

/// Views Start of SkinDetailDialog.xaml.cs ///
﻿using System.Windows.Controls;
using System.Windows.Navigation;
using System.Diagnostics;
using System;
using System.Windows;

namespace SkinHunterWPF.Views
{
    public partial class SkinDetailDialog : UserControl
    {
        public SkinDetailDialog()
        {
            InitializeComponent();
        }

        private void Hyperlink_RequestNavigate(object sender, RequestNavigateEventArgs e)
        {
            try
            {
                Process.Start(new ProcessStartInfo(e.Uri.AbsoluteUri) { UseShellExecute = true });
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to open hyperlink: {ex.Message}");
                MessageBox.Show($"Could not open link: {e.Uri.AbsoluteUri}", "Error", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
            e.Handled = true;
        }
    }
}
/// Views End of SkinDetailDialog.xaml.cs ///

/// Views Start of ChampionDetailView.xaml ///
<UserControl x:Class="SkinHunterWPF.Views.ChampionDetailView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vm="clr-namespace:SkinHunterWPF.ViewModels"
             xmlns:m="clr-namespace:SkinHunterWPF.Models"
             xmlns:converters="clr-namespace:SkinHunterWPF.Converters"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance Type=vm:ChampionDetailViewModel, IsDesignTimeCreatable=False}"
             d:DesignHeight="600" d:DesignWidth="1000">
    <Grid Background="{StaticResource WindowBackgroundColor}">

        <Grid Visibility="{Binding IsLoading, Converter={StaticResource InverseBooleanToVisibilityConverter}, FallbackValue=Collapsed}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <Button Command="{Binding GoBackCommand}" Content="Back"
                    HorizontalAlignment="Left" VerticalAlignment="Top" Margin="15,15,0,0" Width="70"/>

            <StackPanel Grid.Row="0" Margin="0,10,0,20" Orientation="Horizontal" HorizontalAlignment="Center"
                        Visibility="{Binding Champion, Converter={StaticResource NullToVisibilityConverter}}">
                <Image Source="{Binding Champion.ChampionImageSource}" Width="80" Height="80" Stretch="Uniform" Margin="0,-43,15,0" RenderOptions.BitmapScalingMode="HighQuality"/>
                <StackPanel VerticalAlignment="Center">
                    <TextBlock Text="{Binding Champion.Name}" Foreground="{StaticResource ForegroundColor}" FontSize="24" FontWeight="Bold"/>
                    <TextBlock Text="{Binding Champion.Title}" Foreground="{StaticResource ForegroundLightGray}" FontSize="16" FontStyle="Italic"/>
                    <TextBlock Text="{Binding Champion.ShortBio}" Foreground="{StaticResource ForegroundGray}" FontSize="12" TextWrapping="Wrap" MaxWidth="500" Margin="0,5,0,0"/>
                </StackPanel>

            </StackPanel>

            <ItemsControl Grid.Row="1" ItemsSource="{Binding Skins}"
                          VirtualizingPanel.IsVirtualizing="True" VirtualizingPanel.VirtualizationMode="Recycling"
                          HorizontalAlignment="Center" VerticalAlignment="Top" Margin="5">

                <ItemsControl.ItemsPanel>

                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal" ItemWidth="220" ItemHeight="255"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>

                    <DataTemplate DataType="{x:Type m:Skin}">

                        <Button Command="{Binding DataContext.SelectSkinCommand, RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                                CommandParameter="{Binding}"
                                Style="{StaticResource ButtonTransparentStyle}" Margin="5">
                            <Border Style="{StaticResource CardBorderStyle}" Padding="0" Width="210" Height="220">
                                <Grid>
                                    <Image Source="{Binding TileImageUrl}" Height="195" Stretch="UniformToFill" VerticalAlignment="Top"
                                           RenderOptions.BitmapScalingMode="HighQuality"/>

                                    <Image Source="pack://application:,,,/Assets/legacy-icon.png" Width="24" Height="24" Opacity="0.8"
                                            HorizontalAlignment="Left" VerticalAlignment="Top" Margin="8"
                                            Visibility="{Binding IsLegacy, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    <Image Source="pack://application:,,,/Assets/chroma-icon.png" Width="24" Height="24" Opacity="0.8"
                                            HorizontalAlignment="Right" VerticalAlignment="Top" Margin="8"
                                            Visibility="{Binding HasChromas, Converter={StaticResource BooleanToVisibilityConverter}}"/>

                                    <Border VerticalAlignment="Bottom" Padding="8,3" HorizontalAlignment="Center">
                                        <StackPanel Orientation="Horizontal">
                                            <Image Source="{Binding RarityImageUrl}" Width="16" Height="16" Margin="0,0,5,0"
                                                   Visibility="{Binding RarityImageUrl, Converter={StaticResource NullToVisibilityConverter}}"/>
                                            <TextBlock Text="{Binding Name}" Foreground="{StaticResource ForegroundColor}" FontSize="13" FontWeight="SemiBold" VerticalAlignment="Center" TextTrimming="CharacterEllipsis" TextAlignment="Center" Width="170" HorizontalAlignment="Center"/>
                                        </StackPanel>
                                    </Border>
                                </Grid>
                            </Border>
                        </Button>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </Grid>

        <ProgressBar Style="{StaticResource LoadingProgressBarStyle}"
                      Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" />
    </Grid>
</UserControl>
/// Views End of ChampionDetailView.xaml ///

/// Views Start of ChampionGridView.xaml ///
<UserControl x:Class="SkinHunterWPF.Views.ChampionGridView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vm="clr-namespace:SkinHunterWPF.ViewModels"
             xmlns:m="clr-namespace:SkinHunterWPF.Models"
             xmlns:converters="clr-namespace:SkinHunterWPF.Converters"
             xmlns:vwp="clr-namespace:WpfToolkit.Controls;assembly=VirtualizingWrapPanel"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance Type=vm:ChampionGridViewModel, IsDesignTimeCreatable=False}"
             d:DesignHeight="600" d:DesignWidth="1000">
    <Grid Background="{StaticResource WindowBackgroundColor}">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="15,15,15,10">
            <TextBox Style="{StaticResource TextBoxWithPlaceholder}"
                      Tag="Search Champions..."
                      Text="{Binding SearchText, UpdateSourceTrigger=PropertyChanged}"
                      MinWidth="250" Margin="0,0,15,0" Height="32"/>

            <TextBlock Text="Role:" Foreground="{StaticResource ForegroundLightGray}" VerticalAlignment="Center" Margin="0,0,5,0"/>
            <ComboBox ItemsSource="{Binding AllRoles}"
                       SelectedItem="{Binding SelectedRole, Mode=TwoWay}"
                       MinWidth="150"
                       VerticalAlignment="Center"
                       Height="32"
                       Style="{StaticResource ComboBoxStyle}"/>
        </StackPanel>

        <ItemsControl Grid.Row="1" ItemsSource="{Binding ChampionsView}"
                      VirtualizingPanel.IsVirtualizing="True"
                      VirtualizingPanel.VirtualizationMode="Recycling"
                      ScrollViewer.CanContentScroll="True"
                      HorizontalAlignment="Center" VerticalAlignment="Top" Margin="5,0,5,5">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <vwp:VirtualizingWrapPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type m:ChampionSummary}">
                    <Button Style="{StaticResource ChampionGridButtonStyle}"
                            Command="{Binding DataContext.SelectChampionCommand, RelativeSource={RelativeSource AncestorType=ItemsControl}}"
                            CommandParameter="{Binding}">
                        <StackPanel Orientation="Vertical" Width="90" HorizontalAlignment="Center">
                            <Border Width="80" Height="80" CornerRadius="3" Margin="0,5,0,5" ClipToBounds="True">
                                <Image Source="{Binding ChampionImageSource}" Stretch="Uniform" 
                                       RenderOptions.BitmapScalingMode="HighQuality"/>
                            </Border>
                            <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" VerticalAlignment="Center"
                                       Foreground="{StaticResource ForegroundColor}" FontSize="12" 
                                       TextTrimming="CharacterEllipsis" TextAlignment="Center" Margin="0,0,0,5"/>
                        </StackPanel>
                    </Button>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>

        <ProgressBar Grid.Row="1" Style="{StaticResource LoadingProgressBarStyle}"
                      Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" />
    </Grid>
</UserControl>
/// Views End of ChampionGridView.xaml ///

/// Views Start of SkinDetailDialog.xaml ///
<UserControl x:Class="SkinHunterWPF.Views.SkinDetailDialog"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vm="clr-namespace:SkinHunterWPF.ViewModels"
             xmlns:m="clr-namespace:SkinHunterWPF.Models"
             xmlns:converters="clr-namespace:SkinHunterWPF.Converters"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance Type=vm:SkinDetailViewModel, IsDesignTimeCreatable=False}"
             Width="850" MaxHeight="650" d:DesignWidth="850">

    <UserControl.Resources>
        <DataTemplate x:Key="ChromaCircleTemplate" DataType="{x:Type m:Chroma}">
            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                <Ellipse Width="50" Height="50" Stroke="{StaticResource ForegroundGray}" StrokeThickness="1" Fill="{Binding ColorBrush}" Margin="0,5,0,5"/>
                <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" FontSize="11" TextTrimming="CharacterEllipsis" Margin="0,0,0,5" MaxWidth="75" TextAlignment="Center" TextWrapping="Wrap"/>
            </StackPanel>
        </DataTemplate>
        <DataTemplate x:Key="ChromaImageTemplate" DataType="{x:Type m:Chroma}">
            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                <Image Source="{Binding ImageUrl}" Width="60" Height="60" Stretch="Uniform" Margin="0,5,0,5" RenderOptions.BitmapScalingMode="HighQuality"/>
                <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" FontSize="11" TextTrimming="CharacterEllipsis" Margin="0,0,0,5" MaxWidth="75" TextAlignment="Center" TextWrapping="Wrap"/>
            </StackPanel>
        </DataTemplate>
        <Style x:Key="RadioButtonCardStyle" TargetType="RadioButton">
            <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
            <Setter Property="Background" Value="{StaticResource CardBackgroundColor}"/>
            <Setter Property="BorderBrush" Value="{StaticResource CardBorderColor}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Margin" Value="4"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Width" Value="95"/>
            <Setter Property="Height" Value="105"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RadioButton">
                        <Border x:Name="border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="4">
                            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource BorderAccentColor}"/>
                                <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource ButtonHoverBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <converters:ChromaToButtonTextConverter x:Key="ChromaToButtonTextConverter"/>
    </UserControl.Resources>

    <Border Background="#1F1F1F" CornerRadius="5" BorderBrush="{StaticResource CardBorderColor}" BorderThickness="1">
        <Grid Margin="20">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <DockPanel Grid.Row="0" Grid.ColumnSpan="2" Margin="0,0,0,15" LastChildFill="False">
                <Button DockPanel.Dock="Right" Command="{Binding CloseDialogCommand}" Style="{StaticResource ButtonIconOnlyStyle}" ToolTip="Close">
                    <Path Data="M0,0 L10,10 M10,0 L0,10" Stroke="{StaticResource ForegroundGray}" StrokeThickness="1.5" Width="10" Height="10"/>
                </Button>
                <StackPanel DockPanel.Dock="Left" Orientation="Horizontal">
                    <Image Source="{Binding SelectedSkin.RarityImageUrl}" Width="20" Height="20" Margin="0,0,8,0" VerticalAlignment="Center"
                           Visibility="{Binding SelectedSkin.RarityImageUrl, Converter={StaticResource NullToVisibilityConverter}}"/>
                    <TextBlock Text="{Binding SelectedSkin.Name}" Foreground="{StaticResource ForegroundColor}" FontSize="20" FontWeight="Bold" VerticalAlignment="Center"/>
                </StackPanel>
            </DockPanel>

            <StackPanel Grid.Row="1" Grid.Column="0" Margin="0,0,25,0" MaxWidth="400">
                <Border Style="{StaticResource CardBorderStyle}" Padding="0">
                    <Grid>
                        <Image Source="{Binding SelectedSkin.SplashImageUrl}" Height="240" Stretch="UniformToFill" VerticalAlignment="Top"/>
                    </Grid>
                </Border>
                <ScrollViewer MaxHeight="150" VerticalScrollBarVisibility="Auto" Margin="0,15,0,0">
                    <TextBlock Text="{Binding SelectedSkin.Description, FallbackValue='This skin does not have a description.'}"
                               Foreground="{StaticResource ForegroundLightGray}" FontSize="13" TextWrapping="Wrap"/>
                </ScrollViewer>
                <Border Background="#44FFFF00" BorderBrush="#FFFFCC00" BorderThickness="1" CornerRadius="3" Padding="8,5" Margin="0,15,0,0">
                    <TextBlock Text="This skin may not work properly due to game updates" FontSize="11" Foreground="#FFFFEEAA"/>
                </Border>
            </StackPanel>

            <DockPanel Grid.Row="1" Grid.Column="1">
                <StackPanel DockPanel.Dock="Top">
                    <TextBlock Margin="0,0,0,10" Foreground="{StaticResource ForegroundLightGray}">
                        <Run Text="View skin on "/>
                        <Hyperlink NavigateUri="{Binding KhadaViewerUrl}" RequestNavigate="Hyperlink_RequestNavigate" Foreground="#FF77AADD">
                            <Run Text="Model viewer"/>
                        </Hyperlink>
                    </TextBlock>

                    <!-- <TextBlock Margin="0,0,0,10" Foreground="DodgerBlue" Text="ℹ" ToolTip="Preview the in-game appearance of the skin."/>!-->
                </StackPanel>
                <Separator DockPanel.Dock="Top" Margin="0,0,0,15" Background="{StaticResource CardBorderColor}"/>

                <Border DockPanel.Dock="Bottom" Margin="0,15,0,0" Background="#4417A2B8" BorderBrush="#FF17A2B8" BorderThickness="1" Padding="8,5" CornerRadius="3">
                    <TextBlock FontSize="12" Foreground="#FFA6D9E2">
                         <Run Text="This is going to consume a credit"/>
                         <Run Text="{Binding UserCredits, StringFormat='({0} credits left)'}" Foreground="LightGreen"/>
                    </TextBlock>
                </Border>

                <StackPanel Orientation="Vertical">
                    <TextBlock Text="Chromas" Foreground="{StaticResource ForegroundColor}" FontSize="16" FontWeight="SemiBold" Margin="0,0,0,8"/>
                    <TabControl Padding="0" Margin="0,0,0,0">
                        <TabItem Header="Circles">
                            <StackPanel Orientation="Vertical">
                                <TextBlock Text="Select a variation to download." Foreground="{StaticResource ForegroundLightGray}" FontSize="12" Margin="0,8,0,8" FontStyle="Italic"/>
                                <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="260" Padding="5,0,5,0" HorizontalScrollBarVisibility="Disabled">
                                    <ItemsControl ItemsSource="{Binding AvailableChromas}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <WrapPanel Orientation="Horizontal" ItemWidth="95" ItemHeight="105"/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate DataType="{x:Type m:Chroma}">
                                                <RadioButton GroupName="ChromaSelectionCircles" Style="{StaticResource RadioButtonCardStyle}"
                                                             IsChecked="{Binding IsSelected, Mode=OneWay}"
                                                             Command="{Binding DataContext.ToggleChromaSelectionCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                                             CommandParameter="{Binding}">
                                                    <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                                                        <Ellipse Width="50" Height="50" Stroke="{StaticResource ForegroundGray}" StrokeThickness="1" Fill="{Binding ColorBrush}" Margin="0,5,0,5"/>
                                                        <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" FontSize="11" TextTrimming="CharacterEllipsis" Margin="0,0,0,5" MaxWidth="75" TextAlignment="Center" TextWrapping="Wrap"/>
                                                    </StackPanel>
                                                </RadioButton>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </ScrollViewer>
                            </StackPanel>
                        </TabItem>
                        <TabItem Header="Images">
                            <StackPanel Orientation="Vertical">
                                <TextBlock Text="Select a variation to download." Foreground="{StaticResource ForegroundLightGray}" FontSize="12" Margin="0,8,0,8" FontStyle="Italic"/>
                                <ScrollViewer VerticalScrollBarVisibility="Auto" MaxHeight="260" Padding="5,0,5,0" HorizontalScrollBarVisibility="Disabled">
                                    <ItemsControl ItemsSource="{Binding AvailableChromas}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <WrapPanel Orientation="Horizontal" ItemWidth="95" ItemHeight="105"/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate DataType="{x:Type m:Chroma}">
                                                <RadioButton GroupName="ChromaSelectionImages" Style="{StaticResource RadioButtonCardStyle}"
                                                             IsChecked="{Binding IsSelected, Mode=OneWay}"
                                                             Command="{Binding DataContext.ToggleChromaSelectionCommand, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}"
                                                             CommandParameter="{Binding}">
                                                    <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                                                        <Image Source="{Binding ImageUrl}" Width="60" Height="60" Stretch="Uniform" Margin="0,5,0,5" RenderOptions.BitmapScalingMode="HighQuality"/>
                                                        <TextBlock Text="{Binding Name}" HorizontalAlignment="Center" FontSize="11" TextTrimming="CharacterEllipsis" Margin="0,0,0,5" MaxWidth="75" TextAlignment="Center" TextWrapping="Wrap"/>
                                                    </StackPanel>
                                                </RadioButton>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </ScrollViewer>
                            </StackPanel>
                        </TabItem>
                    </TabControl>
                </StackPanel>
            </DockPanel>

            <Grid Grid.Row="2" Grid.ColumnSpan="2" Margin="0,20,0,0">
                <Button Content="Close" HorizontalAlignment="Left" Width="90"
                        Command="{Binding CloseDialogCommand}"/>
                <Button Content="{Binding SelectedChroma, Converter={StaticResource ChromaToButtonTextConverter}, FallbackValue='Download Skin'}"
                         Style="{StaticResource ButtonPrimaryStyle}" HorizontalAlignment="Right" Width="150"
                         Command="{Binding DownloadSkinCommand}"
                         IsEnabled="{Binding CanDownload}">
                    <Button.ContentTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <Path Data="M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z" Fill="White" Width="14" Height="14" Stretch="Uniform" VerticalAlignment="Center" Margin="0,0,8,0"/>
                                <TextBlock Text="{Binding}" VerticalAlignment="Center"/>
                            </StackPanel>
                        </DataTemplate>
                    </Button.ContentTemplate>
                </Button>
            </Grid>

            <ProgressBar Grid.Row="0" Grid.RowSpan="3" Grid.ColumnSpan="2" Style="{StaticResource LoadingProgressBarStyle}"
                          Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}" />

        </Grid>
    </Border>
</UserControl>
/// Views End of SkinDetailDialog.xaml ///

/// ViewModels Start of BaseViewModel.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel;

namespace SkinHunterWPF.ViewModels
{
    public abstract partial class BaseViewModel : ObservableObject
    {
        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(IsNotLoading))]
        private bool _isLoading;

        public bool IsNotLoading => !IsLoading;
    }
}
/// ViewModels End of BaseViewModel.cs ///

/// ViewModels Start of ChampionDetailViewModel.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using SkinHunterWPF.Models;
using SkinHunterWPF.Services;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Linq;
using System.Windows;
using System;

namespace SkinHunterWPF.ViewModels
{
    public partial class ChampionDetailViewModel : BaseViewModel
    {
        private readonly INavigationService _navigationService;

        [ObservableProperty]
        private ChampionDetail? _champion;

        [ObservableProperty]
        private ObservableCollection<Skin> _skins = [];

        public ChampionDetailViewModel(INavigationService navigationService)
        {
            _navigationService = navigationService;
        }

        [RelayCommand]
        public async Task LoadChampionAsync(int championId)
        {
            if (Champion?.Id == championId && Skins.Count > 0)
            {
                Console.WriteLine($"DEBUG VM: Champion {championId} already loaded with {Skins.Count} skins. Skipping reload.");
                IsLoading = false;
                return;
            }

            IsLoading = true;
            Skins.Clear();
            Champion = null;


            var details = await CdragonDataService.GetChampionDetailsAsync(championId);

            if (details != null)
            {
                Champion = details;

                Skins.Clear();
                if (details.Skins != null && details.Skins.Count > 0)
                {
                    int skinsAddedCount = 0;
                    foreach (var skin in details.Skins)
                    {
                        if (!skin.Name.Equals($"{details.Name}", StringComparison.OrdinalIgnoreCase) &&
                            !skin.Name.Equals($"Base {details.Name}", StringComparison.OrdinalIgnoreCase) &&
                            !skin.Name.Contains("Original", StringComparison.OrdinalIgnoreCase))
                        {
                            Skins.Add(skin);
                            skinsAddedCount++;
                        }
                    }
                    Console.WriteLine($"DEBUG VM: Loaded {skinsAddedCount} non-base/original skins for {Champion.Name}. Total in details.Skins: {details.Skins.Count}");
                }
                else
                {
                    Console.WriteLine($"DEBUG VM: details.Skins was null or empty for {Champion.Name}.");
                }
            }
            else
            {
                MessageBox.Show($"Failed to load details for Champion ID: {championId}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            IsLoading = false;
        }

        [RelayCommand]
        private void SelectSkin(Skin? skin)
        {
            if (skin != null)
            {
                _navigationService.ShowDialog<SkinDetailViewModel>(skin);
            }
        }

        [RelayCommand]
        private void GoBack()
        {
            _navigationService.GoBack();
        }
    }
}
/// ViewModels End of ChampionDetailViewModel.cs ///

/// ViewModels Start of ChampionGridViewModel.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using SkinHunterWPF.Models;
using SkinHunterWPF.Services;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Data;
using System.ComponentModel;
using System;
using System.Windows;
using System.Collections.Generic;
using System.Diagnostics;
using System.Windows.Threading;

namespace SkinHunterWPF.ViewModels
{
    public partial class ChampionGridViewModel : BaseViewModel
    {
        private readonly INavigationService _navigationService;
        private readonly ObservableCollection<ChampionSummary> _allChampions = new();

        [ObservableProperty]
        private string? _searchText;

        [ObservableProperty]
        private ObservableCollection<string> _allRoles = new();

        [ObservableProperty]
        private string? _selectedRole = "All";

        public ICollectionView ChampionsView { get; }

        public ChampionGridViewModel(INavigationService navigationService)
        {
            _navigationService = navigationService;
            ChampionsView = CollectionViewSource.GetDefaultView(_allChampions);
            ChampionsView.Filter = FilterChampions;
            AllRoles.Add("All");
        }

        partial void OnSearchTextChanged(string? value)
        {
            Application.Current?.Dispatcher.InvokeAsync(() => ChampionsView.Refresh(), DispatcherPriority.Background);
        }

        partial void OnSelectedRoleChanged(string? value)
        {
            Debug.WriteLine($"[ChampionGridViewModel] Selected Role Changed: {value}");
            Application.Current?.Dispatcher.InvokeAsync(() => ChampionsView.Refresh(), DispatcherPriority.Background);
        }

        private bool FilterChampions(object item)
        {
            if (!(item is ChampionSummary champ)) return false;

            bool textMatch = string.IsNullOrWhiteSpace(SearchText) ||
                             champ.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase);

            bool roleMatch = string.IsNullOrEmpty(SelectedRole) ||
                             SelectedRole.Equals("All", StringComparison.OrdinalIgnoreCase) ||
                             (champ.Roles != null && champ.Roles.Any(r => r.Equals(SelectedRole, StringComparison.OrdinalIgnoreCase)));

            return textMatch && roleMatch;
        }

        private void PopulateRoles()
        {
            var uniqueRoles = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            if (_allChampions.Any())
            {
                foreach (var champ in _allChampions)
                {
                    if (champ.Roles != null)
                    {
                        foreach (var role in champ.Roles)
                        {
                            if (!string.IsNullOrWhiteSpace(role))
                            {
                                uniqueRoles.Add(role);
                            }
                        }
                    }
                }
            }

            var sortedRoles = uniqueRoles.OrderBy(r => r).ToList();
            string? currentSelection = SelectedRole;

            AllRoles.Clear();
            AllRoles.Add("All");
            foreach (var role in sortedRoles)
            {
                string displayRole = role.Length > 0 ? char.ToUpper(role[0]) + role.Substring(1) : role;
                AllRoles.Add(displayRole);
            }

            if (!string.IsNullOrEmpty(currentSelection) && AllRoles.Contains(currentSelection))
            {
                if (SelectedRole != currentSelection) SelectedRole = currentSelection;
            }
            else
            {
                if (SelectedRole != "All") SelectedRole = "All";
            }
        }

        [RelayCommand]
        public async Task LoadChampionsAsync()
        {
            if (IsLoading) return;

            if (_allChampions.Any() && AllRoles.Count > 1)
            {
                Debug.WriteLine("[ChampionGridViewModel] Champions and Roles likely loaded. Forcing UI Refresh.");
                IsLoading = true;
                await Application.Current.Dispatcher.InvokeAsync(() => {
                    PopulateRoles();
                    ChampionsView.Refresh();
                }, DispatcherPriority.DataBind);
                IsLoading = false;
                return;
            }

            IsLoading = true;
            Debug.WriteLine("[ChampionGridViewModel] Initial Loading Champions...");

            foreach (var champ in _allChampions)
            {
                champ.CancelCurrentLoad();
            }
            _allChampions.Clear();

            AllRoles.Clear();
            AllRoles.Add("All");
            SelectedRole = "All";

            var champs = await CdragonDataService.GetChampionSummariesAsync();

            if (champs != null)
            {
                foreach (var champ in champs.OrderBy(c => c.Name))
                {
                    if (champ.Roles == null) champ.Roles = new List<string>();
                    _allChampions.Add(champ);
                }
                Debug.WriteLine($"[ChampionGridViewModel] Added {_allChampions.Count} champions to collection.");

                await Application.Current.Dispatcher.InvokeAsync(() => {
                    PopulateRoles();
                    ChampionsView.Refresh();
                    Debug.WriteLine("[ChampionGridViewModel] Roles populated and ChampionsView refreshed.");
                }, DispatcherPriority.DataBind);
            }
            else
            {
                Debug.WriteLine("[ChampionGridViewModel] Failed to load champions from service.");
                Application.Current?.Dispatcher.Invoke(() => {
                    MessageBox.Show("Failed to load champions.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                });
            }
            IsLoading = false;
        }

        [RelayCommand]
        private void SelectChampion(ChampionSummary? champion)
        {
            if (champion != null)
            {
                _navigationService.NavigateTo<ChampionDetailViewModel>(champion.Id);
            }
        }
    }
}
/// ViewModels End of ChampionGridViewModel.cs ///

/// ViewModels Start of MainViewModel.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using SkinHunterWPF.Services;
using System.Threading.Tasks;
using System.Linq;
using System.Windows;

namespace SkinHunterWPF.ViewModels
{
    public partial class MainViewModel : BaseViewModel
    {
        private readonly INavigationService _navigationService;

        [ObservableProperty]
        private BaseViewModel? _currentViewModel;

        [ObservableProperty]
        private BaseViewModel? _dialogViewModel;

        public MainViewModel(INavigationService navigationService, ChampionGridViewModel championGridVM)
        {
            _navigationService = navigationService;
            _currentViewModel = championGridVM;
            _currentViewModel.IsLoading = true;
            _ = LoadInitialDataAsync();
        }

        private async Task LoadInitialDataAsync()
        {
            if (CurrentViewModel is ChampionGridViewModel cgvm && !cgvm.ChampionsView.Cast<object>().Any())
            {
                await cgvm.LoadChampionsCommand.ExecuteAsync(null);
            }
            IsLoading = false;
        }

        [RelayCommand]
        private void CloseDialog()
        {
            DialogViewModel = null;
        }

        [RelayCommand]
        private void NavigateToChampions()
        {
            if (DialogViewModel == null)
                _navigationService.NavigateTo<ChampionGridViewModel>();
        }

        [RelayCommand]
        private void NavigateToInstalled()
        {
            if (DialogViewModel == null)
                MessageBox.Show("Installed View Not Implemented Yet.");
        }

        [RelayCommand]
        private void OpenSearch()
        {
            if (DialogViewModel == null)
                MessageBox.Show("Search Not Implemented Yet.");
        }

        [RelayCommand]
        private void OpenProfile()
        {
            if (DialogViewModel == null)
                MessageBox.Show("Profile View Not Implemented Yet.");
        }
    }
}
/// ViewModels End of MainViewModel.cs ///

/// ViewModels Start of SkinDetailViewModel.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using SkinHunterWPF.Models;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System;
using Microsoft.Extensions.DependencyInjection;
using System.Windows;
using System.Diagnostics;

namespace SkinHunterWPF.ViewModels
{
    public partial class SkinDetailViewModel : BaseViewModel
    {
        private readonly IServiceProvider _serviceProvider;

        [ObservableProperty]
        private Skin? _selectedSkin;

        [ObservableProperty]
        private ObservableCollection<Chroma> _availableChromas = new();

        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(IsDefaultSelected))]
        [NotifyPropertyChangedFor(nameof(KhadaViewerUrl))]
        private Chroma? _selectedChroma;

        [ObservableProperty]
        private int _userCredits = 5;

        public bool IsDefaultSelected => SelectedChroma == null;

        public string? KhadaViewerUrl
        {
            get
            {
                if (SelectedSkin == null) return null;
                int skinId = SelectedSkin.Id;
                int? chromaId = SelectedChroma?.Id;
                string url = $"https://modelviewer.lol/model-viewer?id={skinId}";
                if (chromaId.HasValue && chromaId.Value != 0 && chromaId.Value / 1000 == skinId)
                {
                    url += $"&chroma={chromaId.Value}";
                }
                return url;
            }
        }

        public SkinDetailViewModel(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
            Debug.WriteLine("[SkinDetailViewModel] Constructor called.");
        }

        public void LoadSkin(Skin skin)
        {
            Debug.WriteLine($"[SkinDetailViewModel] LoadSkin called for Skin ID: {skin.Id} ('{skin.Name}')");
            SelectedSkin = skin;
            AvailableChromas.Clear();
            Debug.WriteLine($"[SkinDetailViewModel] AvailableChromas cleared.");

            if (skin.Chromas != null && skin.Chromas.Any())
            {
                Debug.WriteLine($"[SkinDetailViewModel] Skin has {skin.Chromas.Count} chromas to process.");
                foreach (var chroma in skin.Chromas)
                {
                    if (chroma != null)
                    {
                        chroma.IsSelected = false;
                        AvailableChromas.Add(chroma);
                        Debug.WriteLine($"[SkinDetailViewModel] Added Chroma ID: {chroma.Id}, Name: '{chroma.Name}' to AvailableChromas.");
                    }
                }
                Debug.WriteLine($"[SkinDetailViewModel] Finished processing chromas. Final AvailableChromas count: {AvailableChromas.Count}");
            }
            else
            {
                Debug.WriteLine($"[SkinDetailViewModel] Skin ID: {skin.Id} has no chromas.");
            }

            SelectedChroma = null;
            DownloadSkinCommand.NotifyCanExecuteChanged();
            RefreshChromaSelections(null);
        }

        public bool CanDownload()
        {
            return UserCredits > 0;
        }

        [RelayCommand(CanExecute = nameof(CanDownload))]
        private async Task DownloadSkinAsync()
        {
            IsLoading = true;
            var skinOrChromaName = IsDefaultSelected ? SelectedSkin?.Name : SelectedChroma?.Name;
            var idToDownload = IsDefaultSelected ? SelectedSkin?.Id : SelectedChroma?.Id;
            Debug.WriteLine($"[SkinDetailViewModel] DownloadSkinAsync: Downloading '{skinOrChromaName}' (ID: {idToDownload})");

            await Task.Delay(1500);

            UserCredits--;
            DownloadSkinCommand.NotifyCanExecuteChanged();

            IsLoading = false;
            MessageBox.Show($"'{skinOrChromaName}' (ID: {idToDownload}) download initiated!", "Download", MessageBoxButton.OK, MessageBoxImage.Information);

            CloseDialog();
        }


        [RelayCommand]
        private void CloseDialog()
        {
            Debug.WriteLine("[SkinDetailViewModel] CloseDialog called.");
            var mainViewModel = _serviceProvider.GetService<MainViewModel>();
            mainViewModel?.CloseDialogCommand.Execute(null);
        }

        private void SetDefaultSelection()
        {
            if (SelectedChroma != null)
            {
                SelectedChroma.IsSelected = false;
            }
            SelectedChroma = null;
            RefreshChromaSelections(null);
        }

        [RelayCommand]
        private void ToggleChromaSelection(Chroma? clickedChroma)
        {
            if (clickedChroma == null) return;

            Debug.WriteLine($"[SkinDetailViewModel] ToggleChromaSelection called for Chroma ID: {clickedChroma.Id}");

            if (SelectedChroma == clickedChroma)
            {
                Debug.WriteLine($"[SkinDetailViewModel] Deselecting Chroma ID: {clickedChroma.Id}");
                SetDefaultSelection();
            }
            else
            {
                Debug.WriteLine($"[SkinDetailViewModel] Selecting Chroma ID: {clickedChroma.Id}");
                if (SelectedChroma != null)
                {
                    SelectedChroma.IsSelected = false;
                }
                SelectedChroma = clickedChroma;
                SelectedChroma.IsSelected = true;
                RefreshChromaSelections(SelectedChroma);
            }
        }

        private void RefreshChromaSelections(Chroma? selected)
        {
            foreach (var ch in AvailableChromas)
            {
                ch.IsSelected = (ch == selected);
            }
            var tempList = AvailableChromas.ToList();
            AvailableChromas.Clear();
            foreach (var item in tempList)
            {
                AvailableChromas.Add(item);
            }
        }
    }
}
/// ViewModels End of SkinDetailViewModel.cs ///

/// Services Start of CdragonDataService.cs ///
﻿using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using SkinHunterWPF.Models;
using System.Linq;
using System.IO;
using System.Net.Http.Headers;
using System.Diagnostics;

namespace SkinHunterWPF.Services
{
    public static class CdragonDataService
    {
        private static readonly HttpClient _httpClient = CreateHttpClient();
        private static readonly JsonSerializerOptions _jsonOptions = new() { PropertyNameCaseInsensitive = true };

        private const string CdragonBaseUrl = "https://raw.communitydragon.org/latest";
        private const string DataRoot = $"{CdragonBaseUrl}/plugins/rcp-be-lol-game-data/global/default";
        private static string? _cdragonVersion;

        private const string SupabaseUrl = "https://odlqwkgewzxxmbsqutja.supabase.co";
        private const string SupabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9kbHF3a2dld3p4eG1ic3F1dGphIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQyMTM2NzcsImV4cCI6MjA0OTc4OTY3N30.qka6a71bavDeUQgy_BKoVavaClRQa_gT36Au7oO9AF0";
        private const string SupabaseStorageBasePath = "/storage/v1/object/public";

        private static HttpClient CreateHttpClient() => new();

        private static async Task<string> GetCdragonVersionAsync()
        {
            if (_cdragonVersion == null)
            {
                try
                {
                    var metaUrl = $"{CdragonBaseUrl}/content-metadata.json";
                    using var request = new HttpRequestMessage(HttpMethod.Get, metaUrl);
                    using var response = await _httpClient.SendAsync(request);
                    response.EnsureSuccessStatusCode();
                    using var json = await response.Content.ReadAsStreamAsync();
                    var metadata = await JsonSerializer.DeserializeAsync<Dictionary<string, JsonElement>>(json, _jsonOptions);
                    if (metadata != null && metadata.TryGetValue("version", out var versionElement))
                    {
                        _cdragonVersion = versionElement.GetString() ?? "latest";
                    }
                    else { _cdragonVersion = "latest"; }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"[CdragonDataService] Error fetching CDRAGON version: {ex.Message}");
                    _cdragonVersion = "latest";
                }
            }
            return _cdragonVersion;
        }

        private static async Task<T?> FetchDataAsync<T>(string fullUrl, bool isSupabase = false) where T : class
        {
            var httpClientToUse = _httpClient;
            try
            {
                Debug.WriteLine($"[CdragonDataService] Fetching: {fullUrl}");
                using var request = new HttpRequestMessage(HttpMethod.Get, fullUrl);
                if (isSupabase)
                {
                    request.Headers.TryAddWithoutValidation("apikey", SupabaseAnonKey);
                }

                using var response = await httpClientToUse.SendAsync(request);
                response.EnsureSuccessStatusCode();

                byte[] contentBytes = await response.Content.ReadAsByteArrayAsync();

                if (contentBytes == null || contentBytes.Length == 0)
                {
                    Debug.WriteLine($"[CdragonDataService] Warning: Content bytes were null or empty for {Path.GetFileNameWithoutExtension(fullUrl)} despite 200 OK status.");
                    return null;
                }

                using var memoryStream = new MemoryStream(contentBytes);
                var result = await JsonSerializer.DeserializeAsync<T>(memoryStream, _jsonOptions);
                if (result != null)
                {
                    Debug.WriteLine($"[CdragonDataService] Successfully deserialized {Path.GetFileNameWithoutExtension(fullUrl)} into {typeof(T).Name}.");
                }
                else
                {
                    Debug.WriteLine($"[CdragonDataService] Deserialization of {Path.GetFileNameWithoutExtension(fullUrl)} into {typeof(T).Name} resulted in null.");
                }
                return result;
            }
            catch (HttpRequestException httpEx)
            {
                Debug.WriteLine($"[CdragonDataService] HTTP Error fetching {Path.GetFileNameWithoutExtension(fullUrl)}: {httpEx.Message} (Status: {httpEx.StatusCode})");
            }
            catch (JsonException jsonEx)
            {
                Debug.WriteLine($"[CdragonDataService] JSON Error parsing {Path.GetFileNameWithoutExtension(fullUrl)}: {jsonEx.Message}. LineNumber: {jsonEx.LineNumber}, BytePositionInLine: {jsonEx.BytePositionInLine}, Path: {jsonEx.Path}");
                try
                {
                    using var requestRetry = new HttpRequestMessage(HttpMethod.Get, fullUrl);
                    if (isSupabase) { requestRetry.Headers.TryAddWithoutValidation("apikey", SupabaseAnonKey); }
                    using var responseRetry = await httpClientToUse.SendAsync(requestRetry);
                    if (responseRetry.IsSuccessStatusCode)
                    {
                        string text = await responseRetry.Content.ReadAsStringAsync();
                        Debug.WriteLine($"[CdragonDataService] --- Raw JSON Content on Error for {Path.GetFileNameWithoutExtension(fullUrl)} ---\n{text}\n---------------------------------");
                    }
                }
                catch (Exception readEx)
                {
                    Debug.WriteLine($"[CdragonDataService] Could not read response as string on JSON error: {readEx.Message}");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[CdragonDataService] Generic Error fetching {Path.GetFileNameWithoutExtension(fullUrl)}: {ex.Message}");
            }
            return null;
        }

        private static async Task<SupabaseChampionData?> FetchChampionDataFromSupabaseAsync(int championId)
        {
            string bucket = "api_json";
            string filePath = $"{championId}.json";
            string supabaseFileUrl = $"{SupabaseUrl}{SupabaseStorageBasePath}/{bucket}/{filePath}";
            return await FetchDataAsync<SupabaseChampionData>(supabaseFileUrl, isSupabase: true);
        }


        public static async Task<List<ChampionSummary>?> GetChampionSummariesAsync()
        {
            _ = await GetCdragonVersionAsync();
            var url = $"{DataRoot}/v1/champion-summary.json";
            var summaries = await FetchDataAsync<List<ChampionSummary>>(url);
            return summaries?.Where(c => c.Id != -1).OrderBy(c => c.Name).ToList();
        }

        public static async Task<Dictionary<string, Skin>?> GetAllSkinsAsync()
        {
            _ = await GetCdragonVersionAsync();
            var url = $"{DataRoot}/v1/skins.json";
            Debug.WriteLine($"[CdragonDataService] Attempting to fetch and parse all skins from: {url}");
            var allSkins = await FetchDataAsync<Dictionary<string, Skin>>(url);
            if (allSkins != null)
            {
                Debug.WriteLine($"[CdragonDataService] Successfully fetched and parsed {allSkins.Count} total skins from skins.json.");
            }
            else
            {
                Debug.WriteLine($"[CdragonDataService] Failed to fetch or parse skins.json. allSkins is null.");
            }
            return allSkins;
        }

        public static async Task<ChampionDetail?> GetChampionDetailsAsync(int championId)
        {
            Debug.WriteLine($"[CdragonDataService] GetChampionDetailsAsync called for champion ID: {championId}");
            _ = await GetCdragonVersionAsync();
            var detailsUrl = $"{DataRoot}/v1/champions/{championId}.json";
            var championDetailWpf = await FetchDataAsync<ChampionDetail>(detailsUrl);

            if (championDetailWpf == null)
            {
                Debug.WriteLine($"[CdragonDataService] Failed to load champion details for {championId} from Cdragon champions/{championId}.json. Returning null.");
                return null;
            }

            var allSkinsFromCdragon = await GetAllSkinsAsync();
            var championDataFromSupabase = await FetchChampionDataFromSupabaseAsync(championId);

            if (championDataFromSupabase == null)
            {
                Debug.WriteLine($"[CdragonDataService] WARNING: Failed to load champion data for {championId} from Supabase. Chroma data might be sourced only from Cdragon/skins.json.");
            }
            else
            {
                Debug.WriteLine($"[CdragonDataService] Successfully loaded champion data for {championId} from Supabase. Contains {championDataFromSupabase.Skins?.Count ?? 0} skin entries.");
            }


            var skinsForThisChampionWpf = new List<Skin>();

            if (allSkinsFromCdragon != null)
            {
                Debug.WriteLine($"[CdragonDataService] Processing skins for champion ID {championId} from {allSkinsFromCdragon.Count} total Cdragon skins.");
                foreach (var cdragonSkinEntry in allSkinsFromCdragon.Where(kvp => kvp.Value.ChampionId == championId))
                {
                    Skin cdragonSkinObject = cdragonSkinEntry.Value;
                    string skinIdentifier = $"Skin ID: {cdragonSkinObject.Id} ('{cdragonSkinObject.Name}') for Champion ID: {championId}";
                    Debug.WriteLine($"[CdragonDataService] Processing {skinIdentifier}");

                    var currentWpfSkin = new Skin
                    {
                        Id = cdragonSkinObject.Id,
                        Name = cdragonSkinObject.Name,
                        TilePath = cdragonSkinObject.TilePath,
                        SplashPath = cdragonSkinObject.SplashPath,
                        RarityGemPath = cdragonSkinObject.RarityGemPath,
                        IsLegacy = cdragonSkinObject.IsLegacy,
                        Description = cdragonSkinObject.Description,
                        Chromas = new List<Chroma>()
                    };

                    var championJsonSkinInfo = championDetailWpf.Skins?.FirstOrDefault(s => s.Id == currentWpfSkin.Id);
                    if (!string.IsNullOrWhiteSpace(championJsonSkinInfo?.Description))
                    {
                        currentWpfSkin.Description = championJsonSkinInfo.Description;
                    }

                    SupabaseSkinData? supabaseSkinData = null;
                    if (championDataFromSupabase?.Skins != null)
                    {
                        supabaseSkinData = championDataFromSupabase.Skins.FirstOrDefault(s => s.Id == currentWpfSkin.Id);
                        if (supabaseSkinData == null)
                        {
                            Debug.WriteLine($"[CdragonDataService] {skinIdentifier}: No matching skin data found in Supabase champion data.");
                        }
                    }
                    else if (championDataFromSupabase != null && championDataFromSupabase.Skins == null)
                    {
                        Debug.WriteLine($"[CdragonDataService] {skinIdentifier}: Supabase champion data loaded, but its 'Skins' list is null.");
                    }


                    bool chromasPopulatedFromSupabase = false;
                    if (supabaseSkinData?.Chromas != null && supabaseSkinData.Chromas.Any())
                    {
                        Debug.WriteLine($"[CdragonDataService] {skinIdentifier}: Populating chromas from Supabase ({supabaseSkinData.Chromas.Count} found).");
                        foreach (var supabaseChroma in supabaseSkinData.Chromas)
                        {
                            if (supabaseChroma != null)
                            {
                                currentWpfSkin.Chromas.Add(new Chroma
                                {
                                    Id = supabaseChroma.Id,
                                    Name = supabaseChroma.Name,
                                    ChromaPath = supabaseChroma.ChromaPath,
                                    Colors = supabaseChroma.Colors != null ? new List<string>(supabaseChroma.Colors) : null
                                });
                                Debug.WriteLine($"[CdragonDataService] {skinIdentifier}: Added Supabase Chroma ID: {supabaseChroma.Id}, Name: '{supabaseChroma.Name}'");
                            }
                        }
                        chromasPopulatedFromSupabase = true;
                    }
                    else if (supabaseSkinData?.Chromas != null && !supabaseSkinData.Chromas.Any())
                    {
                        Debug.WriteLine($"[CdragonDataService] {skinIdentifier}: Supabase skin data found, but its 'Chromas' list is empty.");
                    }
                    else if (supabaseSkinData == null && championDataFromSupabase != null)
                    {
                    }


                    if (!chromasPopulatedFromSupabase && cdragonSkinObject.Chromas != null && cdragonSkinObject.Chromas.Any())
                    {
                        Debug.WriteLine($"[CdragonDataService] {skinIdentifier}: Supabase chromas not used or not found. Falling back to Cdragon/skins.json ({cdragonSkinObject.Chromas.Count} found).");
                        foreach (var cdragonChroma in cdragonSkinObject.Chromas)
                        {
                            if (cdragonChroma != null && !currentWpfSkin.Chromas.Any(ch => ch.Id == cdragonChroma.Id))
                            {
                                currentWpfSkin.Chromas.Add(new Chroma
                                {
                                    Id = cdragonChroma.Id,
                                    Name = cdragonChroma.Name,
                                    ChromaPath = cdragonChroma.ChromaPath,
                                    Colors = cdragonChroma.Colors != null ? new List<string>(cdragonChroma.Colors) : null
                                });
                                Debug.WriteLine($"[CdragonDataService] {skinIdentifier}: Added Cdragon/skins.json Chroma ID: {cdragonChroma.Id}, Name: '{cdragonChroma.Name}'");
                            }
                        }
                    }
                    else if (!chromasPopulatedFromSupabase)
                    {
                        Debug.WriteLine($"[CdragonDataService] {skinIdentifier}: No chromas found from Supabase, and Cdragon/skins.json also has no chromas (or 'Chromas' list is null).");
                    }

                    Debug.WriteLine($"[CdragonDataService] {skinIdentifier}: Final chromas count for skin: {currentWpfSkin.Chromas.Count}");
                    currentWpfSkin.Chromas = currentWpfSkin.Chromas.OrderBy(c => c.Id).ToList();
                    skinsForThisChampionWpf.Add(currentWpfSkin);
                }
            }
            else
            {
                Debug.WriteLine($"[CdragonDataService] WARNING: allSkinsFromCdragon (cdn/v1/skins.json) was null. Cannot process any skins for champion {championId}.");
            }

            championDetailWpf.Skins = skinsForThisChampionWpf.OrderBy(s => s.Name).ToList();
            Debug.WriteLine($"[CdragonDataService] GetChampionDetailsAsync for champion ID {championId} finished. Total skins populated: {championDetailWpf.Skins.Count}");
            return championDetailWpf;
        }


        public static string GetAssetUrl(string? relativePath)
        {
            if (string.IsNullOrWhiteSpace(relativePath))
            {
                return "pack://application:,,,/Assets/placeholder.png";
            }

            if (Uri.TryCreate(relativePath, UriKind.Absolute, out Uri? uriResult) &&
                (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps))
            {
                return relativePath;
            }

            const string apiAssetPrefix = "/lol-game-data/assets";
            if (relativePath.StartsWith(apiAssetPrefix, StringComparison.OrdinalIgnoreCase))
            {
                var pathSegment = relativePath[apiAssetPrefix.Length..].TrimStart('/');
                return $"{DataRoot}/{pathSegment}".ToLowerInvariant();
            }
            return $"{DataRoot}/{relativePath.TrimStart('/')}".ToLowerInvariant();
        }
    }
}
/// Services End of CdragonDataService.cs ///

/// Services Start of ImageService.cs ///
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SkinHunterWPF.Services
{
    internal class ImageService
    {
    }
}
/// Services End of ImageService.cs ///

/// Services Start of INavigationService.cs ///
﻿namespace SkinHunterWPF.Services
{
    public interface INavigationService
    {
        void NavigateTo<TViewModel>() where TViewModel : ViewModels.BaseViewModel;
        void NavigateTo<TViewModel>(object parameter) where TViewModel : ViewModels.BaseViewModel;
        void ShowDialog<TViewModel>(object parameter) where TViewModel : ViewModels.BaseViewModel;
        void GoBack();
    }
}
/// Services End of INavigationService.cs ///

/// Services Start of NavigationService.cs ///
﻿using SkinHunterWPF.ViewModels;
using SkinHunterWPF.Models;
using System;
using Microsoft.Extensions.DependencyInjection;
using System.Linq;

namespace SkinHunterWPF.Services
{
    public class NavigationService : INavigationService
    {
        private readonly IServiceProvider _serviceProvider;
        private BaseViewModel? _previousViewModel;
        private MainViewModel? _mainViewModelCache;

        public NavigationService(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        private MainViewModel MainVM => _mainViewModelCache ??= _serviceProvider.GetRequiredService<MainViewModel>();

        private BaseViewModel GetViewModel<TViewModel>() where TViewModel : BaseViewModel
        {
            return _serviceProvider.GetRequiredService<TViewModel>();
        }

        private void SetCurrentViewModel(BaseViewModel viewModel)
        {
            _previousViewModel = MainVM.CurrentViewModel;
            MainVM.CurrentViewModel = viewModel;
        }

        public void NavigateTo<TViewModel>() where TViewModel : BaseViewModel
        {
            var viewModel = GetViewModel<TViewModel>();
            SetCurrentViewModel(viewModel);
            if (viewModel is ChampionGridViewModel cgvm && !cgvm.ChampionsView.Cast<object>().Any())
            {
                _ = cgvm.LoadChampionsCommand.ExecuteAsync(null);
            }
        }

        public void NavigateTo<TViewModel>(object parameter) where TViewModel : BaseViewModel
        {
            var viewModel = GetViewModel<TViewModel>();

            if (viewModel is ChampionDetailViewModel cdvm && parameter is int champId)
            {
                _ = cdvm.LoadChampionCommand.ExecuteAsync(champId);
            }

            SetCurrentViewModel(viewModel);
        }

        public void ShowDialog<TViewModel>(object parameter) where TViewModel : BaseViewModel
        {
            if (typeof(TViewModel) == typeof(SkinDetailViewModel) && parameter is Skin skinToShow)
            {
                var viewModel = _serviceProvider.GetRequiredService<SkinDetailViewModel>();
                viewModel.LoadSkin(skinToShow);
                MainVM.DialogViewModel = viewModel;
            }
            else
            {
                Console.WriteLine($"Cannot show dialog for VM {typeof(TViewModel)} with parameter {parameter?.GetType()}");
                MainVM.DialogViewModel = null;
            }
        }

        public void GoBack()
        {
            if (MainVM.DialogViewModel != null)
            {
                MainVM.DialogViewModel = null;
                return;
            }

            if (_previousViewModel != null)
            {
                var currentType = MainVM.CurrentViewModel?.GetType();
                var previousType = _previousViewModel.GetType();

                if (currentType != previousType)
                {
                    MainVM.CurrentViewModel = _previousViewModel;
                    _previousViewModel = _serviceProvider.GetService<ChampionGridViewModel>();
                }
                else
                {
                    NavigateTo<ChampionGridViewModel>();
                }

            }
            else
            {
                NavigateTo<ChampionGridViewModel>();
            }
        }
    }
}
/// Services End of NavigationService.cs ///

/// Models Start of ChampionDetail.cs ///
﻿using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace SkinHunterWPF.Models
{
    public class ChampionDetail : ChampionSummary
    {
        [JsonPropertyName("title")]
        public string Title { get; set; } = string.Empty;

        [JsonPropertyName("shortBio")]
        public string ShortBio { get; set; } = string.Empty;

        [JsonIgnore]
        public List<Skin> Skins { get; set; } = new List<Skin>();
    }
}
/// Models End of ChampionDetail.cs ///

/// Models Start of ChampionSummary.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel;
using SkinHunterWPF.Services;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net.Http;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media.Imaging;
using System.Windows.Threading;

namespace SkinHunterWPF.Models
{
    public partial class ChampionSummary : ObservableObject
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("alias")]
        public string Alias { get; set; } = string.Empty;

        [JsonPropertyName("squarePortraitPath")]
        public string SquarePortraitPath { get; set; } = string.Empty;

        [JsonPropertyName("roles")]
        public List<string>? Roles { get; set; }

        private BitmapImage? _championImageSourceField;

        [JsonIgnore]
        public BitmapImage? ChampionImageSource
        {
            get
            {
                if (_championImageSourceField == null || _championImageSourceField == _placeholderImage)
                {
                    if (!_isImageLoading && !string.IsNullOrEmpty(OriginalImageUrl) && !OriginalImageUrl.StartsWith("pack:"))
                    {
                        _ = LoadImageAsync();
                    }
                    return _placeholderImage;
                }
                return _championImageSourceField;
            }
            private set
            {
                SetProperty(ref _championImageSourceField, value);
            }
        }

        [JsonIgnore]
        private volatile bool _isImageLoading = false;
        [JsonIgnore]
        private static readonly HttpClient _httpClient = new HttpClient { Timeout = TimeSpan.FromSeconds(15) };
        [JsonIgnore]
        private static readonly Dictionary<string, BitmapImage> _imageCache = new Dictionary<string, BitmapImage>(StringComparer.OrdinalIgnoreCase);
        [JsonIgnore]
        private static readonly BitmapImage? _placeholderImage = LoadPlaceholderImage();

        private CancellationTokenSource? _cancellationTokenSource;

        private async Task LoadImageAsync()
        {
            if (_isImageLoading) return;
            _isImageLoading = true;

            _cancellationTokenSource?.Cancel();
            _cancellationTokenSource = new CancellationTokenSource();
            var token = _cancellationTokenSource.Token;

            string imageUrl = OriginalImageUrl;
            BitmapImage? finalImage = null;

            if (string.IsNullOrEmpty(imageUrl) || imageUrl.StartsWith("pack:"))
            {
                finalImage = _placeholderImage;
            }
            else
            {
                lock (_imageCache)
                {
                    if (_imageCache.TryGetValue(imageUrl, out var cachedImageFromLock))
                    {
                        finalImage = cachedImageFromLock;
                    }
                }

                if (finalImage == null)
                {
                    try
                    {
                        Debug.WriteLine($"[ImageLoad] Loading: {imageUrl} for {Name}");
                        using var request = new HttpRequestMessage(HttpMethod.Get, imageUrl);
                        using var response = await _httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, token);
                        response.EnsureSuccessStatusCode();
                        byte[] imageData = await response.Content.ReadAsByteArrayAsync(token);

                        if (token.IsCancellationRequested)
                        {
                            _isImageLoading = false;
                            return;
                        }

                        var bitmap = new BitmapImage();
                        using (var stream = new MemoryStream(imageData))
                        {
                            bitmap.BeginInit();
                            bitmap.CacheOption = BitmapCacheOption.OnLoad;
                            bitmap.DecodePixelWidth = 80;
                            bitmap.StreamSource = stream;
                            bitmap.EndInit();
                        }
                        bitmap.Freeze();
                        finalImage = bitmap;

                        lock (_imageCache)
                        {
                            _imageCache.TryAdd(imageUrl, finalImage);
                        }
                        Debug.WriteLine($"[ImageLoad] Loaded and Cached: {imageUrl} for {Name}");
                    }
                    catch (OperationCanceledException)
                    {
                        Debug.WriteLine($"[ImageLoad] Cancelled: {imageUrl} for {Name}");
                    }
                    catch (Exception ex)
                    {
                        Debug.WriteLine($"[ImageLoad] Error loading image {imageUrl} for {Name}: {ex.Message}");
                        finalImage = _placeholderImage;
                    }
                }
            }

            if (!token.IsCancellationRequested)
            {
                Application.Current.Dispatcher.Invoke(() =>
                {
                    if (!token.IsCancellationRequested)
                    {
                        ChampionImageSource = finalImage;
                    }
                });
            }
            _isImageLoading = false;
        }

        public void CancelCurrentLoad()
        {
            _cancellationTokenSource?.Cancel();
            _isImageLoading = false;
        }

        [JsonIgnore]
        public string OriginalImageUrl => CdragonDataService.GetAssetUrl(SquarePortraitPath);

        [JsonIgnore]
        public string Key => Alias?.ToLowerInvariant() ?? string.Empty;

        private static BitmapImage? LoadPlaceholderImage()
        {
            try
            {
                var placeholder = new BitmapImage();
                placeholder.BeginInit();
                placeholder.UriSource = new Uri("pack://application:,,,/Assets/placeholder.png", UriKind.Absolute);
                placeholder.DecodePixelWidth = 80;
                placeholder.CacheOption = BitmapCacheOption.OnLoad;
                placeholder.EndInit();
                placeholder.Freeze();
                return placeholder;
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ImageLoad] Failed to load placeholder image: {ex.Message}");
                return null;
            }
        }
    }
}
/// Models End of ChampionSummary.cs ///

/// Models Start of Chroma.cs ///
﻿using System.Text.Json.Serialization;
using System.Collections.Generic;
using System.Windows.Media;

namespace SkinHunterWPF.Models
{
    public class Chroma
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("chromaPath")]
        public string ChromaPath { get; set; } = string.Empty;

        [JsonPropertyName("colors")]
        public List<string>? Colors { get; set; }

        [JsonIgnore]
        public string ImageUrl => Services.CdragonDataService.GetAssetUrl(ChromaPath);

        [JsonIgnore]
        public Brush? ColorBrush
        {
            get
            {
                if (Colors == null || Colors.Count == 0) return Brushes.Gray;
                if (Colors.Count == 1)
                {
                    try { return new SolidColorBrush((Color)ColorConverter.ConvertFromString(Colors[0])); }
                    catch { return Brushes.Gray; }
                }
                try
                {
                    var gradient = new LinearGradientBrush
                    {
                        StartPoint = new System.Windows.Point(0, 0.5),
                        EndPoint = new System.Windows.Point(1, 0.5)
                    };
                    gradient.GradientStops.Add(new GradientStop((Color)ColorConverter.ConvertFromString(Colors[0]), 0.0));
                    gradient.GradientStops.Add(new GradientStop((Color)ColorConverter.ConvertFromString(Colors[1]), 1.0));
                    return gradient;
                }
                catch { return Brushes.Gray; }
            }
        }

        [JsonIgnore]
        private bool _isSelected;

        [JsonIgnore]
        public bool IsSelected
        {
            get => _isSelected;
            set
            {
                _isSelected = value;
            }
        }
    }
}
/// Models End of Chroma.cs ///

/// Models Start of Skin.cs ///
﻿using System.Text.Json.Serialization;
using System.Collections.Generic;
using System.Linq;

namespace SkinHunterWPF.Models
{
    public class Skin
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("tilePath")]
        public string TilePath { get; set; } = string.Empty;

        [JsonPropertyName("splashPath")]
        public string SplashPath { get; set; } = string.Empty;

        [JsonPropertyName("rarityGemPath")]
        public string? RarityGemPath { get; set; }

        [JsonPropertyName("isLegacy")]
        public bool IsLegacy { get; set; }

        [JsonPropertyName("description")]
        public string? Description { get; set; }

        [JsonPropertyName("chromas")]
        public List<Chroma>? Chromas { get; set; }

        public string TileImageUrl => Services.CdragonDataService.GetAssetUrl(TilePath);
        public string SplashImageUrl => Services.CdragonDataService.GetAssetUrl(SplashPath);
        public string? RarityImageUrl => RarityGemPath != null ? Services.CdragonDataService.GetAssetUrl(RarityGemPath) : null;
        public string RarityName => GetRarityNameFromPath(RarityGemPath);
        public int ChampionId => Id / 1000;
        public bool HasChromas => Chromas?.Any() ?? false;

        private static string GetRarityNameFromPath(string? path)
        {
            if (string.IsNullOrEmpty(path)) return "Standard";
            if (path.Contains("ultimate")) return "Ultimate";
            if (path.Contains("mythic")) return "Mythic";
            if (path.Contains("legendary")) return "Legendary";
            if (path.Contains("epic")) return "Epic";
            if (path.Contains("transcendent")) return "Transcendent";
            if (path.Contains("exalted")) return "Exalted";
            return "Unknown";
        }
    }
}
/// Models End of Skin.cs ///

/// Models Start of Skinline.cs ///
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SkinHunterWPF.Models
{
    internal class Skinline
    {
    }
}
/// Models End of Skinline.cs ///

/// Models Start of SupabaseDataModels.cs ///
﻿using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace SkinHunterWPF.Models
{
    public class SupabaseChampionData
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;


        [JsonPropertyName("skins")]
        public List<SupabaseSkinData>? Skins { get; set; }
    }

    public class SupabaseSkinData
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;


        [JsonPropertyName("chromas")]
        public List<SupabaseChromaData>? Chromas { get; set; }
    }

    public class SupabaseChromaData
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; } = string.Empty;

        [JsonPropertyName("chromaPath")]
        public string ChromaPath { get; set; } = string.Empty;

        [JsonPropertyName("colors")]
        public List<string>? Colors { get; set; }
    }
}
/// Models End of SupabaseDataModels.cs ///

/// Converters Start of BooleanToVisibilityConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace SkinHunterWPF.Converters
{
    [ValueConversion(typeof(bool), typeof(Visibility))]
    public class BooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool flag = false;
            if (value is bool b)
            {
                flag = b;
            }
            else if (value is bool?)
            {
                bool? nullable = (bool?)value;
                flag = nullable.HasValue && nullable.Value;
            }

            bool inverse = (parameter as string) == "Inverse";
            if (inverse)
            {
                flag = !flag;
            }

            return flag ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool inverse = (parameter as string) == "Inverse";
            bool flag = (value is Visibility visibility) && visibility == Visibility.Visible;

            if (inverse)
            {
                flag = !flag;
            }
            return flag;
        }
    }
}
/// Converters End of BooleanToVisibilityConverter.cs ///

/// Converters Start of ChromaToButtonTextConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows.Data;
using SkinHunterWPF.Models;

namespace SkinHunterWPF.Converters
{
    public class ChromaToButtonTextConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return value is Chroma ? "Download Chroma" : "Download Skin";
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of ChromaToButtonTextConverter.cs ///

/// Converters Start of InverseBooleanToVisibilityConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace SkinHunterWPF.Converters
{
    [ValueConversion(typeof(bool), typeof(Visibility))]
    public class InverseBooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool flag = false;
            if (value is bool b)
            {
                flag = b;
            }
            else if (value is bool?)
            {
                bool? nullable = (bool?)value;
                flag = nullable.HasValue && nullable.Value;
            }

            return !flag ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return (value is Visibility visibility) && visibility != Visibility.Visible;
        }
    }
}
/// Converters End of InverseBooleanToVisibilityConverter.cs ///

/// Converters Start of ListToStringConverter.cs ///
﻿using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Windows.Data;

namespace SkinHunterWPF.Converters
{
    public class ListToStringConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is IEnumerable<string> list && list.Any())
            {
                return string.Join(", ", list.Select(r => r.Length > 0 ? char.ToUpper(r[0]) + r.Substring(1) : r));
            }
            return string.Empty;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of ListToStringConverter.cs ///

/// Converters Start of NullOrEmptyToVisibilityConverter.cs ///
﻿using System;
using System.Collections;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace SkinHunterWPF.Converters
{
    [ValueConversion(typeof(object), typeof(Visibility))]
    public class NullOrEmptyToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool isNullOrEmpty;

            if (value == null)
            {
                isNullOrEmpty = true;
            }
            else if (value is string s)
            {
                isNullOrEmpty = string.IsNullOrEmpty(s);
            }
            else if (value is ICollection c)
            {
                isNullOrEmpty = c.Count == 0;
            }
            else
            {
                isNullOrEmpty = false;
            }

            bool collapseWhenNullOrEmpty = true;
            if (parameter is string paramString && bool.TryParse(paramString, out bool paramBool))
            {
                collapseWhenNullOrEmpty = paramBool;
            }
            else if (parameter is bool directBool)
            {
                collapseWhenNullOrEmpty = directBool;
            }


            if (collapseWhenNullOrEmpty)
            {
                return isNullOrEmpty ? Visibility.Collapsed : Visibility.Visible;
            }
            else
            {
                return isNullOrEmpty ? Visibility.Visible : Visibility.Collapsed;
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of NullOrEmptyToVisibilityConverter.cs ///

/// Converters Start of NullToVisibilityConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace SkinHunterWPF.Converters
{
    [ValueConversion(typeof(object), typeof(Visibility))]
    public class NullToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool isNull = value == null;
            bool collapseWhenNull = true;

            if (parameter is string paramString && bool.TryParse(paramString, out bool paramBool))
            {
                collapseWhenNull = paramBool;
            }

            if (collapseWhenNull)
            {
                return isNull ? Visibility.Collapsed : Visibility.Visible;
            }
            else
            {
                return isNull ? Visibility.Visible : Visibility.Collapsed;
            }
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of NullToVisibilityConverter.cs ///

/// Converters Start of SkinIdToKhadaUrlConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows.Data;

namespace SkinHunterWPF.Converters
{
    public class SkinIdToKhadaUrlConverter : IValueConverter
    {
        private const string BaseKhadaUrl = "https://modelviewer.lol/model-viewer?id=";

        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is int skinId && skinId > 0)
            {
                string url = $"{BaseKhadaUrl}{skinId}";
                if (parameter is int chromaId && chromaId > 0 && chromaId / 1000 == skinId)
                {
                    url += $"&chroma={chromaId}";
                }
                return url;
            }
            return BaseKhadaUrl;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of SkinIdToKhadaUrlConverter.cs ///

/// Converters Start of TypeCheckConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows.Data;

namespace SkinHunterWPF.Converters
{
    public class TypeCheckConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value == null || !(parameter is Type typeToCheck))
            {
                return false;
            }
            return typeToCheck.IsInstanceOfType(value);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of TypeCheckConverter.cs ///

/// Root Start of MainWindow.xaml.cs ///
﻿using System.Windows;
using System.Windows.Input;
using System;
using System.Windows.Shapes;

namespace SkinHunterWPF
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void TitleBar_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ButtonState == MouseButtonState.Pressed)
                this.DragMove();
        }

        private void MinimizeButton_Click(object sender, RoutedEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }

        private void MaximizeButton_Click(object sender, RoutedEventArgs e)
        {
            this.WindowState = this.WindowState == WindowState.Maximized ? WindowState.Normal : WindowState.Maximized;
        }

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        protected override void OnStateChanged(EventArgs e)
        {
            var maximizeIcon = MaximizeIconPath;
            if (maximizeIcon != null)
            {
                if (this.WindowState == WindowState.Maximized)
                {
                    maximizeIcon.Data = System.Windows.Media.Geometry.Parse("M2,0 H8 V2 H0 V10 H2 V8 H10 V2 H8 Z M3,3 V7 H7 V3Z");
                }
                else
                {
                    maximizeIcon.Data = System.Windows.Media.Geometry.Parse("M0,0 H10 V10 H0 Z M2,2 V8 H8 V2 Z");
                }
            }
            base.OnStateChanged(e);
        }
    }
}
/// Root End of MainWindow.xaml.cs ///

/// Root Start of MainWindow.xaml ///
﻿<Window x:Class="SkinHunterWPF.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:SkinHunterWPF.ViewModels"
        xmlns:v="clr-namespace:SkinHunterWPF.Views"
        xmlns:converters="clr-namespace:SkinHunterWPF.Converters"
        mc:Ignorable="d"
        Title="Skin Hunter" Height="720" Width="1280" MinHeight="600" MinWidth="1000"
        WindowStartupLocation="CenterScreen"
        Background="{StaticResource WindowBackgroundColor}"
        Foreground="{StaticResource ForegroundColor}"
        WindowStyle="None" AllowsTransparency="True" ResizeMode="CanResizeWithGrip">

    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="35" ResizeBorderThickness="5" GlassFrameThickness="0" CornerRadius="0" UseAeroCaptionButtons="False"/>
    </WindowChrome.WindowChrome>

    <Border BorderBrush="{StaticResource FyneSubtleBorderColor}" BorderThickness="0">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <Border Grid.Row="0" Background="{StaticResource HeaderBackgroundColor}" Height="60" MouseLeftButtonDown="TitleBar_MouseLeftButtonDown">
                <Grid Margin="5,0">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center">
                        <Image Source="pack://application:,,,/Assets/logo.png" Height="45" VerticalAlignment="Center" Margin="5,0,5,0"/>
                        <TextBlock Text="skin-hunter" Foreground="{StaticResource ForegroundColor}" VerticalAlignment="Center" FontSize="24" FontWeight="SemiBold"/>
                    </StackPanel>

                    <TextBlock Text="Loading..." 
                               Visibility="{Binding CurrentViewModel.IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"
                               Foreground="{StaticResource ForegroundGray}" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="12"/>

                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Center">
                        <Button Style="{StaticResource TitleBarButtonStyle}" Click="MinimizeButton_Click" ToolTip="Minimize" >
                            <Path Data="M0,5 H10 V7 H0 Z" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}" Width="10" Height="10" Stretch="None"/>
                        </Button>
                        <Button Style="{StaticResource TitleBarButtonStyle}" Click="MaximizeButton_Click" ToolTip="Maximize / Restore">
                            <Path x:Name="MaximizeIconPath" Data="M0,0 H10 V10 H0 Z M2,2 V8 H8 V2 Z" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}" Width="10" Height="10" Stretch="None"/>
                        </Button>
                        <Button Style="{StaticResource CloseButtonStyle}" Click="CloseButton_Click" ToolTip="Close">
                            <Path Data="M0,0 L10,10 M10,0 L0,10" Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}" StrokeThickness="1.5" Width="10" Height="10" Stretch="None"/>
                        </Button>
                    </StackPanel>
                </Grid>
            </Border>

            <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled"
                          Padding="0" Focusable="False">
                <ContentControl Content="{Binding CurrentViewModel}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
                    <ContentControl.Resources>
                        <DataTemplate DataType="{x:Type vm:ChampionGridViewModel}">
                            <v:ChampionGridView/>
                        </DataTemplate>
                        <DataTemplate DataType="{x:Type vm:ChampionDetailViewModel}">
                            <v:ChampionDetailView/>
                        </DataTemplate>
                    </ContentControl.Resources>
                </ContentControl>
            </ScrollViewer>

            <Border Grid.Row="2" Background="{StaticResource HeaderBackgroundColor}" BorderThickness="0,1,0,0" BorderBrush="{StaticResource FyneSubtleBorderColor}" Padding="0,5">
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                    <Button Style="{StaticResource NavButtonStyle}" Content="Champions" Command="{Binding NavigateToChampionsCommand}" 
                            Tag="M3,3H11V11H3V3M13,3H21V11H13V3M3,13H11V21H3V13M13,13H21V21H13V13Z"/>
                    <Button Style="{StaticResource NavButtonStyle}" Content="Search" Command="{Binding OpenSearchCommand}" 
                            Tag="M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L21.5,20L20,21.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z"/>
                    <Button Style="{StaticResource NavButtonStyle}" Content="Installed" Command="{Binding NavigateToInstalledCommand}" 
                            Tag="M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z"/>
                    <Button Style="{StaticResource NavButtonStyle}" Content="Profile" Command="{Binding OpenProfileCommand}" 
                            Tag="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z"/>
                </StackPanel>
            </Border>

            <Grid Grid.Row="0" Grid.RowSpan="3" Background="#CC000000"
                  Visibility="{Binding DialogViewModel, Converter={StaticResource NullToVisibilityConverter}, FallbackValue=Collapsed}">
                <ContentControl Content="{Binding DialogViewModel}" HorizontalAlignment="Center" VerticalAlignment="Center">
                    <ContentControl.Resources>
                        <DataTemplate DataType="{x:Type vm:SkinDetailViewModel}">
                            <v:SkinDetailDialog/>
                        </DataTemplate>
                    </ContentControl.Resources>
                </ContentControl>
            </Grid>

        </Grid>
    </Border>
</Window>
/// Root End of MainWindow.xaml ///

/// Root Start of App.xaml.cs ///
﻿using Microsoft.Extensions.DependencyInjection;
using SkinHunterWPF.Services;
using SkinHunterWPF.ViewModels;
using System.Windows;
using System;

namespace SkinHunterWPF
{
    public partial class App : Application
    {
        public static IServiceProvider? ServiceProvider { get; private set; }

        protected override void OnStartup(StartupEventArgs e)
        {
            try
            {
                base.OnStartup(e);

                var serviceCollection = new ServiceCollection();
                ConfigureServices(serviceCollection);
                ServiceProvider = serviceCollection.BuildServiceProvider();

                var mainWindow = ServiceProvider.GetRequiredService<MainWindow>();
                mainWindow.DataContext = ServiceProvider.GetRequiredService<MainViewModel>();
                mainWindow.Show();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error fatal durante el inicio:\n\n{ex.ToString()}",
                                "Error de Inicio",
                                MessageBoxButton.OK,
                                MessageBoxImage.Error);
                System.Diagnostics.Debug.WriteLine($"STARTUP ERROR: {ex}");
            }
        }

        private void ConfigureServices(IServiceCollection services)
        {
            services.AddSingleton<MainViewModel>();
            services.AddSingleton<INavigationService>(sp => new NavigationService(sp));
            services.AddTransient<ChampionGridViewModel>();
            services.AddTransient<ChampionDetailViewModel>();
            services.AddTransient<SkinDetailViewModel>();
            services.AddSingleton<MainWindow>();
        }
    }
}
/// Root End of App.xaml.cs ///

/// Root Start of App.xaml ///
﻿<Application x:Class="SkinHunterWPF.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:converters="clr-namespace:SkinHunterWPF.Converters">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
            </ResourceDictionary.MergedDictionaries>

            <Color x:Key="FyneBackgroundColorValue">#1E1E1E</Color>
            <Color x:Key="FyneForegroundColorValue">#E0E0E0</Color>
            <Color x:Key="FyneAccentColorValue">#007ACC</Color>
            <Color x:Key="FyneCardBackgroundColorValue">#282828</Color>
            <Color x:Key="FyneSubtleBorderColorValue">#3A3A3A</Color>
            <Color x:Key="FyneHoverBackgroundColorValue">#333333</Color>

            <SolidColorBrush x:Key="FyneBackgroundColor" Color="{StaticResource FyneBackgroundColorValue}"/>
            <SolidColorBrush x:Key="FyneForegroundColor" Color="{StaticResource FyneForegroundColorValue}"/>
            <SolidColorBrush x:Key="FyneAccentColor" Color="{StaticResource FyneAccentColorValue}"/>
            <SolidColorBrush x:Key="FyneCardBackgroundColor" Color="{StaticResource FyneCardBackgroundColorValue}"/>
            <SolidColorBrush x:Key="FyneSubtleBorderColor" Color="{StaticResource FyneSubtleBorderColorValue}"/>
            <SolidColorBrush x:Key="FyneHoverBackgroundColor" Color="{StaticResource FyneHoverBackgroundColorValue}"/>

            <SolidColorBrush x:Key="WindowBackgroundColor" Color="{StaticResource FyneBackgroundColorValue}"/>
            <SolidColorBrush x:Key="HeaderBackgroundColor" Color="#181818"/>
            <SolidColorBrush x:Key="BorderAccentColor" Color="{StaticResource FyneAccentColorValue}"/>
            <SolidColorBrush x:Key="ForegroundColor" Color="{StaticResource FyneForegroundColorValue}"/>
            <SolidColorBrush x:Key="ForegroundLightGray" Color="#B0B0B0"/>
            <SolidColorBrush x:Key="ForegroundGray" Color="#888888"/>
            <SolidColorBrush x:Key="CardBackgroundColor" Color="{StaticResource FyneCardBackgroundColorValue}"/>
            <SolidColorBrush x:Key="CardBorderColor" Color="{StaticResource FyneSubtleBorderColorValue}"/>
            <SolidColorBrush x:Key="ButtonPrimaryBrush" Color="{StaticResource FyneAccentColorValue}"/>
            <SolidColorBrush x:Key="ButtonDefaultBrush" Color="#383838"/>
            <SolidColorBrush x:Key="ButtonHoverBrush" Color="{StaticResource FyneHoverBackgroundColorValue}"/>
            <SolidColorBrush x:Key="ButtonDisabledBrush" Color="#2A2A2A"/>
            <SolidColorBrush x:Key="ScrollBarBackgroundBrush" Color="#252525"/>
            <SolidColorBrush x:Key="ScrollBarThumbBrush" Color="#505050"/>
            <SolidColorBrush x:Key="ScrollBarThumbHoverBrush" Color="#686868"/>

            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <converters:NullOrEmptyToVisibilityConverter x:Key="NullOrEmptyToVisibilityConverter"/>
            <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
            <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
            <converters:ChromaToButtonTextConverter x:Key="ChromaToButtonTextConverter"/>
            <converters:SkinIdToKhadaUrlConverter x:Key="SkinIdToKhadaUrlConverter"/>
            <converters:ListToStringConverter x:Key="ListToStringConverter"/>

            <Style TargetType="Button">
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                <Setter Property="Background" Value="{StaticResource ButtonDefaultBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource CardBorderColor}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="10,6"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border"
                                     Background="{TemplateBinding Background}"
                                     BorderBrush="{TemplateBinding BorderBrush}"
                                     BorderThickness="{TemplateBinding BorderThickness}"
                                     CornerRadius="3">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{StaticResource ButtonHoverBrush}"/>
                                    <Setter Property="BorderBrush" Value="{StaticResource FyneAccentColor}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{StaticResource FyneAccentColor}"/>
                                    <Setter Property="BorderBrush" Value="{StaticResource FyneAccentColor}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="border" Property="Background" Value="{StaticResource ButtonDisabledBrush}"/>
                                    <Setter Property="BorderBrush" Value="#404040"/>
                                    <Setter TargetName="border" Property="Opacity" Value="0.6"/>
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundGray}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="TitleBarButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Width" Value="46"/>
                <Setter Property="Height" Value="32"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Foreground" Value="{StaticResource ForegroundGray}"/>
                <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="#44AAAAAA"/>
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundLightGray}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="#66999999"/>
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="CloseButtonStyle" TargetType="Button" BasedOn="{StaticResource TitleBarButtonStyle}">
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#E81123"/>
                        <Setter Property="Foreground" Value="White"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="#F1707A"/>
                        <Setter Property="Foreground" Value="White"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="ButtonIconOnlyStyle" TargetType="Button">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="5"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="Foreground" Value="{StaticResource ForegroundGray}"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="4">
                                <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="#44666666"/>
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundLightGray}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="#66555555"/>
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ChampionGridButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Margin" Value="4"/>
                <Setter Property="Width" Value="100"/>
                <Setter Property="Height" Value="110"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="Bd" Height="110" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" CornerRadius="3">
                                <ContentPresenter/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="Bd" Property="Background" Value="{StaticResource FyneHoverBackgroundColor}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="Bd" Property="Background" Value="{StaticResource FyneAccentColor}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ButtonTransparentStyle" TargetType="Button">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" x:Name="Bd">
                                <ContentPresenter/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="Bd" Property="Effect">
                                        <Setter.Value>
                                            <DropShadowEffect ShadowDepth="0" Color="{StaticResource FyneAccentColorValue}" Opacity="0.5" BlurRadius="8"/>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ButtonPrimaryStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Background" Value="{StaticResource ButtonPrimaryBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ButtonPrimaryBrush}"/>
                <Setter Property="Foreground" Value="White"/>
            </Style>

            <Style x:Key="CardBorderStyle" TargetType="Border">
                <Setter Property="Background" Value="{StaticResource CardBackgroundColor}"/>
                <Setter Property="BorderBrush" Value="{StaticResource CardBorderColor}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="CornerRadius" Value="4"/>
                <Setter Property="Padding" Value="5"/>
            </Style>

            <Style x:Key="LoadingProgressBarStyle" TargetType="ProgressBar">
                <Setter Property="IsIndeterminate" Value="True"/>
                <Setter Property="Width" Value="50"/>
                <Setter Property="Height" Value="50"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Foreground" Value="{StaticResource ForegroundLightGray}"/>
                <Setter Property="Background" Value="{StaticResource ForegroundLightGray}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ProgressBar" >
                            <Grid>
                                <Ellipse Stroke="{StaticResource ForegroundLightGray}" StrokeThickness="3" Opacity="0.3"/>
                                <Ellipse Name="PART_Indicator" Stroke="{StaticResource ForegroundLightGray}" StrokeThickness="3" StrokeDashArray="20, 20" StrokeDashCap="Round">
                                    <Ellipse.RenderTransform>
                                        <RotateTransform Angle="0" CenterX="25" CenterY="25" />
                                    </Ellipse.RenderTransform>
                                    <Ellipse.Triggers>
                                        <EventTrigger RoutedEvent="Loaded">
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="PART_Indicator" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" From="0" To="360" Duration="0:0:1.5" RepeatBehavior="Forever"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>
                                    </Ellipse.Triggers>
                                </Ellipse>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="TabControl">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="0"/>
            </Style>

            <Style TargetType="TabItem">
                <Setter Property="Foreground" Value="{StaticResource ForegroundLightGray}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Padding" Value="12,6"/>
                <Setter Property="BorderThickness" Value="0 0 0 2"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TabItem">
                            <Border x:Name="border"
                                     BorderThickness="{TemplateBinding BorderThickness}"
                                     BorderBrush="{TemplateBinding BorderBrush}"
                                     Background="{TemplateBinding Background}"
                                     Padding="{TemplateBinding Padding}"
                                     Margin="0,0,8,0">
                                <ContentPresenter ContentSource="Header"
                                                   HorizontalAlignment="Center"
                                                   VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                                    <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource BorderAccentColor}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                                    <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource BorderAccentColor}"/>
                                    <Setter TargetName="border" Property="Opacity" Value="0.8"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="TextBoxWithPlaceholder" TargetType="TextBox">
                <Setter Property="Background" Value="{StaticResource FyneCardBackgroundColor}"/>
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                <Setter Property="BorderBrush" Value="{StaticResource FyneSubtleBorderColor}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="8,5"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="CaretBrush" Value="{StaticResource ForegroundLightGray}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TextBox">
                            <Grid>
                                <Border x:Name="border" Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CornerRadius="3"/>
                                <ScrollViewer x:Name="PART_ContentHost" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                <TextBlock Text="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                               Foreground="{StaticResource ForegroundGray}"
                                               Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                               Visibility="Collapsed" x:Name="PlaceholderText" IsHitTestVisible="False"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Text" Value=""/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Visibility" TargetName="PlaceholderText" Value="Visible"/>
                                </MultiTrigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="BorderBrush" Value="{StaticResource FyneAccentColor}"/>
                                    <Setter TargetName="border" Property="Background" Value="{StaticResource FyneHoverBackgroundColor}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" Value="{StaticResource FyneSubtleBorderColor}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="RadioButtonCardStyle" TargetType="RadioButton">
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                <Setter Property="Background" Value="{StaticResource CardBackgroundColor}"/>
                <Setter Property="BorderBrush" Value="{StaticResource CardBorderColor}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Margin" Value="4"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Width" Value="95"/>
                <Setter Property="Height" Value="105"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="RadioButton">
                            <Border x:Name="border"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="4">
                                <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource BorderAccentColor}"/>
                                    <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource ButtonHoverBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ScrollBarThumbStyle" TargetType="{x:Type Thumb}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border Name="ThumbVisual" CornerRadius="3"
                                    Background="{StaticResource ScrollBarThumbBrush}"
                                    BorderBrush="Transparent" BorderThickness="0" />
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ThumbVisual" Property="Background" Value="{StaticResource ScrollBarThumbHoverBrush}" />
                                </Trigger>
                                <Trigger Property="IsDragging" Value="True">
                                    <Setter TargetName="ThumbVisual" Property="Background" Value="{StaticResource BorderAccentColor}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border Background="Transparent" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type ScrollBar}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="Width" Value="8"/>
                <Setter Property="MinWidth" Value="8"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid Name="Bg" SnapsToDevicePixels="true" Background="{StaticResource ScrollBarBackgroundBrush}">
                                <Track x:Name="PART_Track" IsDirectionReversed="true" Width="Auto" HorizontalAlignment="Stretch">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource ScrollBarPageButtonStyle}" Command="ScrollBar.PageUpCommand" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumbStyle}" Margin="1,0,1,0" />
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource ScrollBarPageButtonStyle}" Command="ScrollBar.PageDownCommand" />
                                    </Track.IncreaseRepeatButton>
                                </Track>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="Width" Value="Auto"/>
                        <Setter Property="MinWidth" Value="0"/>
                        <Setter Property="Height" Value="8"/>
                        <Setter Property="MinHeight" Value="8"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ScrollBar}">
                                    <Grid Name="Bg" SnapsToDevicePixels="true" Background="{StaticResource ScrollBarBackgroundBrush}">
                                        <Track x:Name="PART_Track" IsDirectionReversed="False" Height="Auto" VerticalAlignment="Stretch">
                                            <Track.DecreaseRepeatButton>
                                                <RepeatButton Style="{StaticResource ScrollBarPageButtonStyle}" Command="ScrollBar.PageLeftCommand" />
                                            </Track.DecreaseRepeatButton>
                                            <Track.Thumb>
                                                <Thumb Style="{StaticResource ScrollBarThumbStyle}" Margin="0,1,0,1" />
                                            </Track.Thumb>
                                            <Track.IncreaseRepeatButton>
                                                <RepeatButton Style="{StaticResource ScrollBarPageButtonStyle}" Command="ScrollBar.PageRightCommand" />
                                            </Track.IncreaseRepeatButton>
                                        </Track>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="NavButtonStyle" TargetType="Button">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Foreground" Value="{StaticResource ForegroundGray}"/>
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="80"/>
                <Setter Property="Padding" Value="8,5"/>
                <Setter Property="Margin" Value="10,0"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border" Background="Transparent" Padding="{TemplateBinding Padding}">
                                <StackPanel Orientation="Vertical" HorizontalAlignment="Center">
                                    <Path x:Name="iconPath" Data="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}" Fill="{TemplateBinding Foreground}" Width="22" Height="22" Stretch="Uniform" Margin="0,0,0,4"/>
                                    <TextBlock x:Name="buttonText" Text="{TemplateBinding Content}" FontSize="11" FontWeight="Normal" TextAlignment="Center"/>
                                </StackPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                                    <Setter TargetName="iconPath" Property="Fill" Value="{StaticResource ForegroundColor}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource FyneAccentColor}"/>
                                    <Setter TargetName="iconPath" Property="Fill" Value="{StaticResource FyneAccentColor}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ToggleButton">
                            <Border x:Name="border" Background="#01FFFFFF" BorderBrush="Transparent" BorderThickness="0">
                                <Path x:Name="arrow" Data="M0,0 L4,4 L8,0 Z" Fill="{StaticResource ForegroundGray}" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,8,0"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="arrow" Property="Fill" Value="{StaticResource ForegroundLightGray}"/>
                                </Trigger>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="arrow" Property="Fill" Value="{StaticResource FyneAccentColor}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="arrow" Property="Fill" Value="{StaticResource ButtonDisabledBrush}"/>
                                    <Setter Property="Opacity" Value="0.5"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                <Setter Property="Background" Value="{StaticResource FyneCardBackgroundColor}"/>
                <Setter Property="BorderBrush" Value="{StaticResource FyneSubtleBorderColor}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="8,5"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBox}">
                            <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                                <Border x:Name="MainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3"/>
                                <ToggleButton x:Name="ToggleButton" 
                                              Style="{StaticResource ComboBoxToggleButton}" 
                                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                              ClickMode="Press" 
                                              Focusable="False"
                                              HorizontalAlignment="Stretch" 
                                              VerticalAlignment="Stretch"/>
                                <ContentPresenter x:Name="ContentSite" 
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  IsHitTestVisible="false" 
                                                  Margin="{TemplateBinding Padding}" 
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                                  Content="{TemplateBinding SelectionBoxItem}" 
                                                  ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                <Popup x:Name="PART_Popup" AllowsTransparency="true" IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                    <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{Binding Path=ActualWidth, ElementName=MainGrid}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                        <Border x:Name="DropDownBorder" Background="{StaticResource CardBackgroundColor}" BorderThickness="1" BorderBrush="{StaticResource CardBorderColor}" CornerRadius="3"/>
                                        <ScrollViewer x:Name="DropDownScrollViewer">
                                            <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                        </ScrollViewer>
                                    </Grid>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" TargetName="MainBorder" Value="{StaticResource FyneSubtleBorderColor}"/>
                                </Trigger>
                                <Trigger Property="IsDropDownOpen" Value="True">
                                    <Setter Property="BorderBrush" TargetName="MainBorder" Value="{StaticResource FyneAccentColor}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundGray}"/>
                                    <Setter Property="Opacity" TargetName="MainBorder" Value="0.6"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type ComboBoxItem}">
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Setter Property="Padding" Value="8,5"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                            <Border x:Name="Bd" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsHighlighted" Value="True">
                                    <Setter TargetName="Bd" Property="Background" Value="{StaticResource FyneAccentColor}"/>
                                    <Setter Property="Foreground" Value="WhiteSmoke"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundGray}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>
/// Root End of App.xaml ///

