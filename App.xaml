<Application x:Class="SkinHunterWPF.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:converters="clr-namespace:SkinHunterWPF.Converters"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- No HandyControl themes needed -->
            </ResourceDictionary.MergedDictionaries>

            <!-- Converters -->
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <converters:NullOrEmptyToVisibilityConverter x:Key="NullOrEmptyToVisibilityConverter"/>
            <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>
            <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
            <converters:ChromaToButtonTextConverter x:Key="ChromaToButtonTextConverter"/>
            <converters:SkinIdToKhadaUrlConverter x:Key="SkinIdToKhadaUrlConverter"/>

            <!-- Global Colors -->
            <SolidColorBrush x:Key="WindowBackgroundColor" Color="#1e1e1e"/>
            <SolidColorBrush x:Key="HeaderBackgroundColor" Color="#0F1729"/>
            <SolidColorBrush x:Key="BorderAccentColor" Color="#586A9E"/>
            <SolidColorBrush x:Key="ForegroundColor" Color="WhiteSmoke"/>
            <SolidColorBrush x:Key="ForegroundLightGray" Color="LightGray"/>
            <SolidColorBrush x:Key="ForegroundGray" Color="Gray"/>
            <SolidColorBrush x:Key="CardBackgroundColor" Color="#282828"/>
            <SolidColorBrush x:Key="CardBorderColor" Color="#444444"/>
            <SolidColorBrush x:Key="ButtonPrimaryBrush" Color="#FF586A9E"/>
            <SolidColorBrush x:Key="ButtonDefaultBrush" Color="#FF444444"/>
            <SolidColorBrush x:Key="ButtonHoverBrush" Color="#FF6A7DBE"/>
            <SolidColorBrush x:Key="ButtonDisabledBrush" Color="#FF333333"/>

            <!-- Base Button Style -->
            <Style TargetType="Button">
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                <Setter Property="Background" Value="{StaticResource ButtonDefaultBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource BorderAccentColor}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="10,5"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border"
                                     Background="{TemplateBinding Background}"
                                     BorderBrush="{TemplateBinding BorderBrush}"
                                     BorderThickness="{TemplateBinding BorderThickness}"
                                     CornerRadius="3">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{StaticResource ButtonHoverBrush}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="{StaticResource BorderAccentColor}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="border" Property="Background" Value="{StaticResource ButtonDisabledBrush}"/>
                                    <Setter TargetName="border" Property="Opacity" Value="0.6"/>
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundGray}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Style for Buttons with only Icon -->
            <Style x:Key="ButtonIconOnlyStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Width" Value="28"/>
                <Setter Property="Height" Value="28"/>
                <Setter Property="Padding" Value="3"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="border" Background="Transparent" CornerRadius="14">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="#44FFFFFF"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="border" Property="Background" Value="#66FFFFFF"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Style for Transparent Buttons (like item clicks) -->
            <Style x:Key="ButtonTransparentStyle" TargetType="Button">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                                <ContentPresenter/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Primary Button Style -->
            <Style x:Key="ButtonPrimaryStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Background" Value="{StaticResource ButtonPrimaryBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ButtonPrimaryBrush}"/>
                <Setter Property="Foreground" Value="White"/>
            </Style>

            <!-- Card Style (using Border) -->
            <Style x:Key="CardBorderStyle" TargetType="Border">
                <Setter Property="Background" Value="{StaticResource CardBackgroundColor}"/>
                <Setter Property="BorderBrush" Value="{StaticResource CardBorderColor}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="CornerRadius" Value="4"/>
                <Setter Property="Padding" Value="5"/>
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect ShadowDepth="1" Color="Black" Opacity="0.3" BlurRadius="5"/>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Loading Indicator Style (Using ProgressBar) -->
            <Style x:Key="LoadingProgressBarStyle" TargetType="ProgressBar">
                <Setter Property="IsIndeterminate" Value="True"/>
                <Setter Property="Width" Value="50"/>
                <Setter Property="Height" Value="50"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Foreground" Value="{StaticResource BorderAccentColor}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ProgressBar" >
                            <Grid>
                                <Ellipse Stroke="{StaticResource BorderAccentColor}" StrokeThickness="3" Opacity="0.3"/>
                                <Ellipse Name="PART_Indicator" Stroke="{StaticResource BorderAccentColor}" StrokeThickness="3" StrokeDashArray="3, 2" StrokeDashCap="Round">
                                    <Ellipse.RenderTransform>
                                        <RotateTransform Angle="0" CenterX="25" CenterY="25" />
                                    </Ellipse.RenderTransform>
                                    <Ellipse.Triggers>
                                        <EventTrigger RoutedEvent="Loaded">
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="PART_Indicator" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" From="0" To="360" Duration="0:0:1.5" RepeatBehavior="Forever"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>
                                    </Ellipse.Triggers>
                                </Ellipse>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Style for TabControl -->
            <Style TargetType="TabControl">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Style>

            <!-- Style for TabItem Headers -->
            <Style TargetType="TabItem">
                <Setter Property="Foreground" Value="{StaticResource ForegroundLightGray}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Padding" Value="10,5"/>
                <Setter Property="BorderThickness" Value="0 0 0 2"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TabItem">
                            <Border x:Name="border"
                                     BorderThickness="{TemplateBinding BorderThickness}"
                                     BorderBrush="{TemplateBinding BorderBrush}"
                                     Background="{TemplateBinding Background}"
                                     Padding="{TemplateBinding Padding}"
                                     Margin="0,0,5,0">
                                <ContentPresenter ContentSource="Header"
                                                   HorizontalAlignment="Center"
                                                   VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                                    <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource BorderAccentColor}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                                    <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource BorderAccentColor}"/>
                                    <Setter TargetName="border" Property="Opacity" Value="0.8"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Placeholder Text for TextBox -->
            <Style x:Key="TextBoxWithPlaceholder" TargetType="TextBox">
                <Setter Property="Background" Value="#333"/>
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                <Setter Property="BorderBrush" Value="{StaticResource CardBorderColor}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="5"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TextBox">
                            <Grid>
                                <Border Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            CornerRadius="3"/>
                                <ScrollViewer x:Name="PART_ContentHost" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                <TextBlock Text="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"
                                               Foreground="{StaticResource ForegroundGray}"
                                               Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                               Visibility="Collapsed" x:Name="PlaceholderText" IsHitTestVisible="False"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Text" Value=""/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Visibility" TargetName="PlaceholderText" Value="Visible"/>
                                </MultiTrigger>
                                <Trigger Property="IsFocused" Value="True">
                                    <Setter Property="BorderBrush" Value="{StaticResource BorderAccentColor}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Style for RadioButton looking like a Card -->
            <Style x:Key="RadioButtonCardStyle" TargetType="RadioButton">
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                <Setter Property="Background" Value="{StaticResource CardBackgroundColor}"/>
                <Setter Property="BorderBrush" Value="{StaticResource CardBorderColor}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Margin" Value="3"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="RadioButton">
                            <Border x:Name="border"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        CornerRadius="4">
                                <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource BorderAccentColor}"/>
                                    <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource ButtonHoverBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>
    </Application.Resources>
</Application>